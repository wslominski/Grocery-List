// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5NqxLwkJf8dtHXPoVMH2rF
// Component: lG71tFQEVK

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponent
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponentHelper

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_app_starter.module.css"; // plasmic-import: 5NqxLwkJf8dtHXPoVMH2rF/projectcss
import sty from "./PlasmicMyTextInput.module.css"; // plasmic-import: lG71tFQEVK/css

createPlasmicElementProxy;

export type PlasmicMyTextInput__VariantMembers = {};
export type PlasmicMyTextInput__VariantsArgs = {};
type VariantPropType = keyof PlasmicMyTextInput__VariantsArgs;
export const PlasmicMyTextInput__VariantProps = new Array<VariantPropType>();

export type PlasmicMyTextInput__ArgsType = {};
type ArgPropType = keyof PlasmicMyTextInput__ArgsType;
export const PlasmicMyTextInput__ArgProps = new Array<ArgPropType>();

export type PlasmicMyTextInput__OverridesType = {
  textInput?: p.Flex<typeof AntdInput>;
};

export interface DefaultMyTextInputProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicMyTextInput__RenderFunc(props: {
  variants: PlasmicMyTextInput__VariantsArgs;
  args: PlasmicMyTextInput__ArgsType;
  overrides: PlasmicMyTextInput__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });

  return (
    true
      ? (() => {
          const child$Props = {
            className: classNames(
              "__wab_instance",
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              sty.textInput
            ),
            onChange: p.generateStateOnChangePropForCodeComponents(
              $state,
              "value",
              ["textInput", "value"],
              AntdInput_Helpers
            ),
            value: p.generateStateValueProp($state, ["textInput", "value"])
          };
          p.initializeCodeComponentStates(
            $state,
            [
              {
                name: "value",
                plasmicStateName: "textInput.value"
              }
            ],
            [],
            AntdInput_Helpers ?? {},
            child$Props
          );

          return (
            <AntdInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              data-plasmic-root={true}
              data-plasmic-for-node={forNode}
              {...child$Props}
            />
          );
        })()
      : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  textInput: ["textInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  textInput: typeof AntdInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMyTextInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMyTextInput__VariantsArgs;
    args?: PlasmicMyTextInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMyTextInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMyTextInput__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMyTextInput__ArgProps,
          internalVariantPropNames: PlasmicMyTextInput__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMyTextInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "textInput") {
    func.displayName = "PlasmicMyTextInput";
  } else {
    func.displayName = `PlasmicMyTextInput.${nodeName}`;
  }
  return func;
}

export const PlasmicMyTextInput = Object.assign(
  // Top-level PlasmicMyTextInput renders the root element
  makeNodeComponent("textInput"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicMyTextInput
    internalVariantProps: PlasmicMyTextInput__VariantProps,
    internalArgProps: PlasmicMyTextInput__ArgProps
  }
);

export default PlasmicMyTextInput;
/* prettier-ignore-end */
